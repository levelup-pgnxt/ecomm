openapi: 3.0.3
info:
  title: Swagger Ecomm - OpenAPI 3.0
  description: >-
    Test project where a fictitious documentation for PagoNxt and Alura training will be created.
  termsOfService: http://swagger.io/terms/
  contact:
    name: Ana C. A. Ferreira
    url: https://github.com/obeaune
  license:
    name: "License: GPLv3"
    url: https://www.gnu.org/licenses/gpl-3.0.html
  version: 0.0.1
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://mockapi.io
security: 
- auth: []
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        status:
          type: string
          enum: [Active, Inactive]
    Categories:
      type: array
      items:
        $ref: "#/components/schemas/Category"
    NewCategory:
      type: object
      properties:
        name:
          type: string
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        slug:
          type: string
        price:
          type: number
          format: double
        quantity:
          type: integer
        categoryId:
          type: string
          format: uuid
    Products:
      type: array
      items:
        $ref: "#/components/schemas/Product"
    NewProduct:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        slug:
          type: string
        price:
          type: number
          format: double
        quantity:
          type: integer
        categoryId:
          type: string
          format: uuid
  securitySchemes:
    auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
tags:
  - name: Categories
    description: Everything about categories
  - name: Products
    description: Everything about products
  - name: Filters
    description: Filters in the product list
paths:
  /api/categories:
    get:
      tags:
      - Categories
      summary: Retrieve all categories
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Categories"
  /api/admin/categories:
    post:
      tags:
      - Categories 
      summary: Adds a new category
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewCategory"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        401:
          description: Unauthorized
          content:
            application/json:
              example: You must authenticate itself to get the requested response
  /api/categories/{id}:
    parameters:
    - name: id
      in: path
      schema:
        type: integer
      required: true
    get:
      tags:
      - Categories 
      summary: Detail of a category
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        404:
          description: Not Found
          content:
            application/json:
              example: Category Not Found
  /api/admin/categories/{id}:
    parameters:
    - name: id
      in: path
      schema:
        type: integer
      required: true
    put:
      tags:
      - Categories 
      summary: Modify a category
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewCategory"
      responses:
        200:
          description: Successful change attempt
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        401:
          description: Unauthorized
          content:
            application/json:
              example: You must authenticate itself to get the requested response
        404:
          description: Not Found
          content:
            application/json:
              example: Category Not Found
    delete:
      tags:
      - Categories 
      summary: Delete a category
      responses:
        200:
          description: Successful delete attempt
          content:
            application/json:
              example: Category deleted successfully
        401:
          description: Unauthorized
          content:
            application/json:
              example: You must authenticate itself to get the requested response
        404:
          description: Not Found
          content:
            application/json:
              example: Category Not Found
    patch:
      tags:
      - Categories
      summary: Modify a field of a category
      responses:
        200:
          description: Successful update attempt
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        401:
          description: Unauthorized
          content:
            application/json:
              example: You must authenticate itself to get the requested response
        404:
          description: Not Found
          content:
            application/json:
              example: Category Not Found
  /api/products:
    get:
      tags:
      - Products
      summary: Retrieve all products
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Products"
  /api/admin/products:
    post:
      tags:
      - Products
      summary: Adds a new product
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewProduct"
      responses:
        201:
          description: Created
          content:
            applicantion/json:
              schema:
                $ref: "#/components/schemas/Product"
        401:
          description: Unauthorized
          content:
            application/json:
              example: You must authenticate itself to get the requested response
  /api/products/{id}:
    parameters:
    - name: id
      in: path
      schema:
        type: integer
      required: true
    get:
      tags:
      - Products
      summary: Detail of a product
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        404:
          description: Not Found
          content:
            application/json:
              example: Category Not Found
  /api/admin/products/{id}:
    parameters:
    - name: id
      in: path
      schema:
        type: integer
      required: true
    put:
      tags:
      - Products
      summary: Modify a product
      responses:
        200:
          description: Successful change attempt
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        401:
          description: Unauthorized
          content:
            application/json:
              example: You must authenticate itself to get the requested response
        404:
          description: Not Found
          content:
            application/json:
              example: Category Not Found
    delete:
      tags:
      - Products
      summary: Delete a product
      responses:
        200:
          description: Successful delete attempt
          content:
            application/json:
              example: Product deleted successfully
        401:
          description: Unauthorized
          content:
            application/json:
              example: You must authenticate itself to get the requested response
        404:
          description: Not Found
          content:
            application/json:
              example: Category Not Found
    patch:
      tags:
      - Products
      summary: Modify a field of a product
      responses:
        200:
          description: Successful update attempt
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        401:
          description: Unauthorized
          content:
            application/json:
              example: You must authenticate itself to get the requested response
        404:
          description: Not Found
          content:
            application/json:
              example: Product Not Found
  /api/products/price:
    get:
      tags:
      - Filters
      summary: Retrieve products by price range
      parameters:
        - name: range
          in: query
          schema:
            type: object
            properties:
              minPrice: 
                type: number
                format: double
              maxPrice:
                type: number
                format: double
          required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"          
        404:
          description: Not Found
          content:
            application/json:
              example: Not Found
  /api/products/category:
    get:
      tags:
      - Filters
      summary: Retrieve products by category
      parameters:
        - name: category
          in: query
          schema:
            type: string
          required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"         
        404:
          description: Not Found
          content:
            application/json:
              example: Not Found
  /api/products/stock:
    get:
      tags:
      - Filters
      summary: Retrieve products by stock value
      parameters:
        - name: stock
          in: query
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"         
        404:
          description: Not Found
          content:
            application/json:
              example: Not Found
