{
    "openapi": "3.0.3",
    "info": {
      "title": "Ecomm Products",
      "description": "This API is responsible for the products' requests and responses in the e-commerce.",
      "version": "0.0.1"
    },
    "paths": {
      "/api/categories": {
        "get": {
          "summary": "List categories",
          "description": "List all categories",
          "responses": {
            "200": {
              "description": "ok",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Category"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/admin/categories": {
        "post": {
          "summary": "Add category",
          "description": "Add new category",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nome": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Category"
                  }
                }
              }
            },
            "401": {
              "description": "unauthorized"
            }
          }
        }
      },
      "/api/categories/{id}": {
        "get": {
          "summary": "Find category",
          "description": "Find one specific category",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID of category that needs to be fetched",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Category"
                  }
                }
              }
            },
            "400": {
              "description": "invalid ID supplied"
            },
            "404": {
              "description": "not found"
            }
          }
        }
      },
      "/api/admin/categories/{id}": {
        "put": {
          "summary": "Update category",
          "description": "Update category by entering the whole updated category",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID of category that needs to be updated",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Category"
                  }
                }
              }
            },
            "400": {
              "description": "invalid ID supplied"
            },
            "401": {
              "description": "unauthorized"
            }
          }
        },
        "delete": {
          "summary": "Delete category",
          "description": "Delete category by entering its ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID of category that needs to be deleted",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "no content"
            },
            "400": {
              "description": "invalid ID supplied"
            },
            "401": {
              "description": "unauthorized"
            }
          }
        },
        "patch": {
          "summary": "Update status in category",
          "description": "Update only category status",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID of category that needs to be updated",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Category"
                  }
                }
              }
            },
            "400": {
              "description": "invalid ID supplied"
            },
            "401": {
              "description": "unauthorized"
            }
          }
        }
      },
      "/api/products": {
        "get": {
          "summary": "List products",
          "description": "List all products",
          "responses": {
            "200": {
              "description": "ok",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Product"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/admin/products": {
        "post": {
          "summary": "Add product",
          "description": "Add new product",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            },
            "401": {
              "description": "unauthorized"
            }
          }
        }
      },
      "/api/products/{id}": {
        "get": {
          "summary": "Find product",
          "description": "Find one specific product",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID of product that needs to be fetched",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            },
            "400": {
              "description": "invalid ID supplied"
            },
            "404": {
              "description": "not found"
            }
          }
        }
      },
      "/api/admin/products/{id}": {
        "put": {
          "summary": "Update product",
          "description": "Update product by entering the whole updated product",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID of product that needs to be updated",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            },
            "400": {
              "description": "invalid ID supplied"
            },
            "401": {
              "description": "unauthorized"
            }
          }
        },
        "delete": {
          "summary": "Delete product",
          "description": "Delete product by entering its ID",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID of product that needs to be deleted",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "no content"
            },
            "401": {
              "description": "unauthorized"
            }
          }
        }
      },
      "/api/products/filter": {
        "get": {
          "summary": "Find products by filter",
          "parameters": [
            {
              "name": "minPrice",
              "in": "query",
              "description": "minimum price value that needs to be considered for filter",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "maxPrice",
              "in": "query",
              "description": "maximum price value that needs to be considered for filter",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "status",
              "in": "query",
              "description": "Status values that need to be considered for filter",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "stockGreaterThan",
              "in": "query",
              "description": "stockGreaterThan value that needs to be considered for filter",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "ok",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Product"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "invalid filter"
            }
          }
        }
      }
    },
    "components": {
      "schemas": {
        "Category": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid"
            },
            "nome": {
              "type": "string"
            },
            "status": {
              "type": "string"
            }
          }
        },
        "Product": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid"
            },
            "nome": {
              "type": "string"
            },
            "descricao": {
              "type": "string"
            },
            "slug": {
              "type": "string"
            },
            "preco": {
              "type": "number"
            },
            "quantidade": {
              "type": "integer",
              "format": "int64"
            },
            "categoriaid": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      }
    }
  }